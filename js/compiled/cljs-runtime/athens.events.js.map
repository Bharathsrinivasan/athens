{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["G__56050","G__56051","re-posh.core/reg-event-ds","day8.re-frame.tracing/is-trace-enabled?","p__56052","vec__56053","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","+debux-dbg-opts+","debux.common.util/send-form!","opts__51296__auto__","result__51297__auto__","debux.common.util/send-trace!","e","e56056","p__56057","vec__56058","_","event","json-str","athens.db/str-to-db-tx","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","athens.db/init-rfdb","G__56061","G__56062","p__56063","vec__56064","e56067","p__56068","vec__56069","request-type","response","p__56072","vec__56073","debux.common.util/spy-first","e56076","p__56077","vec__56078","db","cljs.core/assoc-in","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n   [athens.db :as db]\n   [re-frame.core :as rf :refer [reg-event-db reg-event-fx reg-sub]]\n   [re-posh.core :as rp :refer [reg-event-ds]]\n   [day8.re-frame.tracing :refer-macros [fn-traced]]\n   [day8.re-frame.http-fx]\n   [ajax.core :refer [json-request-format json-response-format]]\n   [day8.re-frame.async-flow-fx]))\n\n;; -- Initialization ------------------------------------------------\n\n;; (defn boot-flow []\n;;   {:first-dispatch\n;;    [:load-dsdb]\n;;    :rules [{:when :seen? :events :get-dsdb-success :halt? true}\n;;            {:when :seen? :events :api-request-error :dispatch [:app-failed-state] :halt? true}]})\n\n;; (reg-event-fx\n;;  :load-dsdb\n;;  (fn [{:keys [db]} [_ params]]\n;;    {:http-xhrio {:method          :get\n;;                  :uri             db/dsdb-help\n;;                  :headers         {}\n;;                  :response-format (json-response-format {:keywords? true})\n;;                  :on-success      [:get-dsdb-success]\n;;                  :on-failure      [:api-request-error :load-dsdb]}\n;;     :db         (assoc-in db [:loading :dsdb] true)}))\n\n(reg-event-ds\n :upload-dsdb\n (fn-traced [_ [event json-str]]\n            (db/str-to-db-tx json-str)))\n\n;; (reg-event-fx\n;;  :boot-async\n;;  (fn-traced [_ _]\n;;             {:async-flow (boot-flow)}))\n\n(reg-event-db\n :init-rfdb\n (fn [_ _]\n   db/init-rfdb))\n\n;; (reg-event-ds\n;;  :init-dsdb\n;;  (fn [_ _]\n;;    db/init-dsdb))\n\n;; -- Request Handlers -----------------------------------------------------------\n(reg-event-ds\n :get-dsdb-success\n (fn-traced [_ [request-type response]]\n            (db/str-to-db-tx response)\n            ))\n\n(reg-event-db\n :api-request-error\n (fn-traced [db [_ request-type response]]\n   (-> db\n       (assoc-in [:errors request-type] (get-in response [:response :errors]))\n       (assoc-in [:loading request-type] false))))\n"]}