{"version":3,"sources":["athens/page.cljs"],"mappings":"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","names":["athens.page/render-blocks","block-uid","block","G__49978","re-frame.core/subscribe","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__49980","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__49982","cljs.core/chunk-buffer","i__49981","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__49979","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","ch","cljs.core/deref","map__49985","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__49991","uid","string","children","G__49988","G__49994","re-frame.core/dispatch","athens.parser/parse","athens.page/linked-pattern","cljs.core/re-pattern","athens.page/unlinked-pattern","athens.page/block-page","id","node","G__49995","parents","G__49996","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","b","map__49997","title","G__49999","or__4185__auto__","athens.page/node-page","linked-refs","G__50000","unlinked-refs","G__50001","s__50003","b__50005","i__50004","iter__50002","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","s__50007","b__50009","i__50008","iter__50006","athens.page/main","current-route","G__50010","G__50011","cljs.core/chunk-first"],"sourcesContent":["(ns athens.page\n  (:require [athens.parser :refer [parse]]\n            [reagent.core :as reagent]\n            [re-frame.core :refer [subscribe dispatch]]\n            [reitit.frontend.easy :as rfee]))\n\n(defn render-blocks [block-uid]\n  (fn [block-uid]\n    (let [block (subscribe [:block/children [:block/uid block-uid]])]\n      [:div\n       (doall\n        (for [ch (:block/children @block)]\n          (let [{:block/keys [uid string children]} ch]\n            ^{:key uid}\n            [:div\n             [:span.controls {:style {:margin-right 5 :cursor \"pointer\"}\n                              :on-click #(dispatch [:navigate :page {:id uid}])}\n              \"\u2022\"]\n             [:span (parse string)]\n             [:div {:style {:margin-left 20}}\n              [render-blocks uid]]])))])))\n\n; match [[title]] or #title or #[[title]]\n(defn linked-pattern [string]\n  (re-pattern (str \"(\"\n                   \"\\\\[{2}\" string \"\\\\]{2}\"\n                   \"|\" \"#\" string\n                   \"|\" \"#\" \"\\\\[{2}\" string \"\\\\[{2}\"\n                   \")\")))\n\n; also excludes [title] :(\n(defn unlinked-pattern [string]\n  (re-pattern (str \"[^\\\\[|#]\" string)))\n\n(defn block-page [id]\n  (fn [id]\n    (let [node (subscribe [:node [:block/uid id]])\n          parents (subscribe [:block/_children2 [:block/uid id]])]\n      [:div\n       [:span {:style {:color \"gray\"} }\n        (interpose \" > \" \n                   (map (fn [b]\n                          (let [{:block/keys [uid string] :node/keys [title]} b]\n                            ^{:key uid}\n                            [:span\n                             {:style {:cursor \"pointer\"}\n                              :on-click #(dispatch [:navigate :page {:id uid}])}\n                             (or string title)]))\n                        @parents))]\n       [:h2 {:style {:margin 0}} (str \"\u2022 \" (:block/string @node))]\n       [:div {:style {:margin-left 20}}\n        [render-blocks (:block/uid @node)]]])))\n\n(defn node-page [node]\n  (fn [node]\n    (let [linked-refs   (subscribe [:node/refs (linked-pattern   (:node/title node))])\n          unlinked-refs (subscribe [:node/refs (unlinked-pattern (:node/title node))])]\n      [:div\n       [:h2 (:node/title node)]\n       [render-blocks (:block/uid node)]\n       [:div\n        [:h3 \"Linked References\"]\n        [:div\n         (for [id (reduce into [] @linked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]\n       [:div\n        [:h3 \"Unlinked References\"]\n        [:div\n         (for [id (reduce into [] @unlinked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]\n       ])))\n\n(defn main []\n  (let [current-route (subscribe [:current-route])]\n    (fn []\n      (let [node (subscribe [:node [:block/uid (-> @current-route :path-params :id)]])]\n        [:div\n          [:h1 \"Page Panel\"]\n         (if (:node/title @node)\n           [node-page @node]\n           [block-page (:block/uid @node)])]))))\n"]}