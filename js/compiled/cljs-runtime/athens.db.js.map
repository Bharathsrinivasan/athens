{"version":3,"sources":["athens/db.cljs"],"mappings":";;;;;;AASA,AAAA,AAAMA,AAAcC;AAApB,AACE,AAAA;;AAAA;AACA,AAAMA,AAASC;AAAAA,AACb,AAACC,AAAcF;AADFC,AAEb,AAACE,AAAQF;AAFIA,AAGb,AAAA,AAACG,AAAYH;AAHAA,AAIb,AAACI,AAAKJ;AAJOA,AAKb,AAAA,AAAAK,AAACC;AAAD,AAAM,AAAAD,AAACC,AAAIC;AAAmBP;AALhC,AAME,AAAA,AAAAQ,AAACF;AAAD,AAAM,AAAA,AAAAE,AAACC;AAAgBT;;AAK3B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKU;AAQL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAOL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAGL,AAAKC,AAAK,AAACC,AAAcJ;AACzB,AAACK,AAAAA,AAAAA,AAAiBF,AAAAA","names":["athens.db/str-to-db-tx","json-str","x","js/JSON.parse","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p1__56006#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","clojure.edn/read-string","p1__56007#","cljs.core/cons","athens.db/schema","athens.db/init-rfdb","athens.db/init-dsdb","athens.db/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","re-posh.core/connect!"],"sourcesContent":["(ns athens.db\n  (:require [datascript.core :as d]\n            [clojure.edn :as edn]\n            [re-posh.core :as re-posh]\n            [re-frame.core :as re-frame]\n            ;[reitit.core :as reitit]\n            ))\n\n; ajax deserializes JSON string into Clojure vector for us\n(defn str-to-db-tx [json-str]\n  (js-debugger)\n  (as-> json-str x\n    (js/JSON.parse json-str)\n    (js->clj x)\n    (partition 3 x)             ; chunk into 3-tuples\n    (rest x)                    ; drop first tuple which is (?e ?a ?v)\n    (map #(map edn/read-string %) x)\n    (map #(cons :db/add %) x)))\n\n;; (def dsdb-help \"https://raw.githubusercontent.com/tangjeff0/athens/master/data/help-db.json\")\n;; (def dsdb-ego \"https://raw.githubusercontent.com/tangjeff0/athens/master/data/ego-db.json\")\n\n(def schema {:block/uid      {:db/unique :db.unique/identity}\n             :node/title     {:db/unique :db.unique/identity}\n             :attrs/lookup   {:db/cardinality :db.cardinality/many}\n             :block/children {:db/cardinality :db.cardinality/many\n                              :db/valueType :db.type/ref}\n             })\n             \n\n(def init-rfdb\n  {:user/name \"Jeff\"\n   :user/email \"tangj12@gmail.com\"\n   :current-route nil\n   :loading {}\n   :errors {}})\n\n(def init-dsdb\n  [[:db/add 315 :node/title \"NUT\"]])\n\n(def dsdb (d/create-conn schema))\n(re-posh/connect! dsdb)\n\n"]}